How did viewing a diff between two versions of a file help you see the bug that was introduced?
It helps narrow dow the posible lines of code that are causing the bug.

How could having easy access to the entire history of a file make you a more efficient programmer in the long term?
It gives programmers an extra tool to track the evolution of a project. Knowing the order of "construction" is valuable. 

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google docs does?

The pro of manually chosing is that the commits will be units where full logical changes apply. Cons is the risk of loosing data.
Automatic commit helps to reduce the risk of forgetting to commit, but the commit units while not be logical and therefore no
as valuable

Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?
Git is design to handle source code witch must of the time a single feature could span multiple files. This is not the case with
the type of documents one would handle with google docs.

How can you use the commands git log and git diff to view the history of files?
Git log can be use to list commit id and cronological order , and git diff could use any two commit ids as inputs.

How might using version control make you more confident to make changes that could break something?
Because with version control there is always the posibility to revert back to a working version of code.

Now that you have your workspace set up, what do you want to try using Git for?
To manage my code